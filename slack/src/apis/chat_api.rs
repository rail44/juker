/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`chat_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatDeleteError {
    DefaultResponse(crate::models::ChatDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_delete_scheduled_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatDeleteScheduledMessageError {
    DefaultResponse(crate::models::ChatDeleteScheduledMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_get_permalink`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatGetPermalinkError {
    DefaultResponse(crate::models::ChatGetPermalinkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_me_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatMeMessageError {
    DefaultResponse(crate::models::ChatMeMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_post_ephemeral`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatPostEphemeralError {
    DefaultResponse(crate::models::ChatPostEphemeralErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_post_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatPostMessageError {
    DefaultResponse(crate::models::ChatPostMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_schedule_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatScheduleMessageError {
    DefaultResponse(crate::models::ChatScheduleMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_scheduled_messages_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatScheduledMessagesListError {
    DefaultResponse(crate::models::ChatScheduledMessagesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_unfurl`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatUnfurlError {
    DefaultResponse(crate::models::ChatUnfurlErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatUpdateError {
    DefaultResponse(crate::models::ChatUpdateErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Deletes a message.
pub async fn chat_delete(configuration: &configuration::Configuration, token: Option<&str>, ts: Option<f32>, channel: Option<&str>, as_user: Option<bool>) -> Result<crate::models::ChatDeleteSuccessSchema, Error<ChatDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = ts {
        local_var_form_params.insert("ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a pending scheduled message from the queue.
pub async fn chat_delete_scheduled_message(configuration: &configuration::Configuration, token: &str, channel: &str, scheduled_message_id: &str, as_user: Option<bool>) -> Result<crate::models::ChatDeleteScheduledMessageSchema, Error<ChatDeleteScheduledMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.deleteScheduledMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    local_var_form_params.insert("scheduled_message_id", scheduled_message_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatDeleteScheduledMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a permalink URL for a specific extant message
pub async fn chat_get_permalink(configuration: &configuration::Configuration, token: &str, channel: &str, message_ts: &str) -> Result<crate::models::ChatGetPermalinkSuccessSchema, Error<ChatGetPermalinkError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.getPermalink", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("channel", &channel.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message_ts", &message_ts.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatGetPermalinkError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Share a me message into a channel.
pub async fn chat_me_message(configuration: &configuration::Configuration, token: Option<&str>, channel: Option<&str>, text: Option<&str>) -> Result<crate::models::ChatMeMessageSchema, Error<ChatMeMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.meMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatMeMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sends an ephemeral message to a user in a channel.
pub async fn chat_post_ephemeral(configuration: &configuration::Configuration, token: &str, channel: &str, user: &str, as_user: Option<bool>, attachments: Option<&str>, blocks: Option<&str>, icon_emoji: Option<&str>, icon_url: Option<&str>, link_names: Option<bool>, parse: Option<&str>, text: Option<&str>, thread_ts: Option<&str>, username: Option<&str>) -> Result<crate::models::ChatPostEphemeralSuccessSchema, Error<ChatPostEphemeralError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.postEphemeral", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = icon_emoji {
        local_var_form_params.insert("icon_emoji", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = icon_url {
        local_var_form_params.insert("icon_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    local_var_form_params.insert("user", user.to_string());
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatPostEphemeralError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sends a message to a channel.
pub async fn chat_post_message(configuration: &configuration::Configuration, token: &str, channel: &str, as_user: Option<&str>, attachments: Option<&str>, blocks: Option<&str>, icon_emoji: Option<&str>, icon_url: Option<&str>, link_names: Option<bool>, mrkdwn: Option<bool>, parse: Option<&str>, reply_broadcast: Option<bool>, text: Option<&str>, thread_ts: Option<&str>, unfurl_links: Option<bool>, unfurl_media: Option<bool>, username: Option<&str>) -> Result<crate::models::ChatPostMessageSuccessSchema, Error<ChatPostMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.postMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = icon_emoji {
        local_var_form_params.insert("icon_emoji", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = icon_url {
        local_var_form_params.insert("icon_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mrkdwn {
        local_var_form_params.insert("mrkdwn", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_broadcast {
        local_var_form_params.insert("reply_broadcast", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_links {
        local_var_form_params.insert("unfurl_links", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_media {
        local_var_form_params.insert("unfurl_media", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatPostMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Schedules a message to be sent to a channel.
pub async fn chat_schedule_message(configuration: &configuration::Configuration, token: Option<&str>, channel: Option<&str>, text: Option<&str>, post_at: Option<&str>, parse: Option<&str>, as_user: Option<bool>, link_names: Option<bool>, attachments: Option<&str>, blocks: Option<&str>, unfurl_links: Option<bool>, unfurl_media: Option<bool>, thread_ts: Option<f32>, reply_broadcast: Option<bool>) -> Result<crate::models::ChatScheduleMessageSuccessSchema, Error<ChatScheduleMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.scheduleMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = post_at {
        local_var_form_params.insert("post_at", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_links {
        local_var_form_params.insert("unfurl_links", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_media {
        local_var_form_params.insert("unfurl_media", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_broadcast {
        local_var_form_params.insert("reply_broadcast", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatScheduleMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of scheduled messages.
pub async fn chat_scheduled_messages_list(configuration: &configuration::Configuration, token: Option<&str>, channel: Option<&str>, latest: Option<f32>, oldest: Option<f32>, limit: Option<i32>, cursor: Option<&str>) -> Result<crate::models::ChatScheduledMessagesListSchema, Error<ChatScheduledMessagesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.scheduledMessages.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = channel {
        local_var_req_builder = local_var_req_builder.query(&[("channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latest {
        local_var_req_builder = local_var_req_builder.query(&[("latest", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = oldest {
        local_var_req_builder = local_var_req_builder.query(&[("oldest", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatScheduledMessagesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Provide custom unfurl behavior for user-posted URLs
pub async fn chat_unfurl(configuration: &configuration::Configuration, token: &str, channel: &str, ts: &str, unfurls: Option<&str>, user_auth_message: Option<&str>, user_auth_required: Option<bool>, user_auth_url: Option<&str>) -> Result<crate::models::ChatUnfurlSuccessSchema, Error<ChatUnfurlError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.unfurl", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel", channel.to_string());
    local_var_form_params.insert("ts", ts.to_string());
    if let Some(local_var_param_value) = unfurls {
        local_var_form_params.insert("unfurls", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_message {
        local_var_form_params.insert("user_auth_message", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_required {
        local_var_form_params.insert("user_auth_required", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_url {
        local_var_form_params.insert("user_auth_url", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatUnfurlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a message.
pub async fn chat_update(configuration: &configuration::Configuration, token: &str, channel: &str, ts: &str, as_user: Option<&str>, attachments: Option<&str>, blocks: Option<&str>, link_names: Option<&str>, parse: Option<&str>, text: Option<&str>) -> Result<crate::models::ChatUpdateSuccessSchema, Error<ChatUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    local_var_form_params.insert("ts", ts.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

