/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChatScheduleMessageSuccessSchemaMessage {
    #[serde(rename = "bot_id")]
    pub bot_id: String,
    #[serde(rename = "bot_profile", skip_serializing_if = "Option::is_none")]
    pub bot_profile: Option<Box<crate::models::ObjsBotProfile>>,
    #[serde(rename = "team")]
    pub team: String,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "type")]
    pub _type: String,
    #[serde(rename = "user")]
    pub user: String,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl ChatScheduleMessageSuccessSchemaMessage {
    pub fn new(bot_id: String, team: String, text: String, _type: String, user: String) -> ChatScheduleMessageSuccessSchemaMessage {
        ChatScheduleMessageSuccessSchemaMessage {
            bot_id,
            bot_profile: None,
            team,
            text,
            _type,
            user,
            username: None,
        }
    }
}


