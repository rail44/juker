/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AdminConversationsDisconnectSharedErrorSchema : Schema for error response from admin.conversations.disconnectShared



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AdminConversationsDisconnectSharedErrorSchema {
    #[serde(rename = "error")]
    pub error: Error,
    #[serde(rename = "ok")]
    pub ok: crate::models::DefsOkFalse,
}

impl AdminConversationsDisconnectSharedErrorSchema {
    /// Schema for error response from admin.conversations.disconnectShared
    pub fn new(error: Error, ok: crate::models::DefsOkFalse) -> AdminConversationsDisconnectSharedErrorSchema {
        AdminConversationsDisconnectSharedErrorSchema {
            error,
            ok,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Error {
    #[serde(rename = "feature_not_enabled")]
    FeatureNotEnabled,
    #[serde(rename = "not_an_admin")]
    NotAnAdmin,
    #[serde(rename = "not_an_enterprise")]
    NotAnEnterprise,
    #[serde(rename = "channel_not_found")]
    ChannelNotFound,
    #[serde(rename = "not_supported")]
    NotSupported,
    #[serde(rename = "team_not_found")]
    TeamNotFound,
    #[serde(rename = "restricted_action")]
    RestrictedAction,
    #[serde(rename = "missing_scope")]
    MissingScope,
    #[serde(rename = "leaving_team_not_in_channel")]
    LeavingTeamNotInChannel,
    #[serde(rename = "no_teams_to_disconnect")]
    NoTeamsToDisconnect,
    #[serde(rename = "leaving_team_required")]
    LeavingTeamRequired,
    #[serde(rename = "cannot_kick_team")]
    CannotKickTeam,
    #[serde(rename = "cannot_kick_home_team")]
    CannotKickHomeTeam,
}

impl Default for Error {
    fn default() -> Error {
        Self::FeatureNotEnabled
    }
}

