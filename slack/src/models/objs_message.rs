/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObjsMessage {
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<crate::models::ObjsMessageAttachments>>,
    /// This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
    #[serde(rename = "blocks", skip_serializing_if = "Option::is_none")]
    pub blocks: Option<Vec<serde_json::Value>>,
    #[serde(rename = "bot_id", skip_serializing_if = "Option::is_none")]
    pub bot_id: Option<serde_json::Value>,
    #[serde(rename = "bot_profile", skip_serializing_if = "Option::is_none")]
    pub bot_profile: Option<Box<crate::models::ObjsBotProfile>>,
    #[serde(rename = "client_msg_id", skip_serializing_if = "Option::is_none")]
    pub client_msg_id: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Box<crate::models::ObjsComment>>,
    #[serde(rename = "display_as_bot", skip_serializing_if = "Option::is_none")]
    pub display_as_bot: Option<bool>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<crate::models::ObjsFile>>,
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<crate::models::ObjsFile>>,
    #[serde(rename = "icons", skip_serializing_if = "Option::is_none")]
    pub icons: Option<Box<crate::models::ObjsMessageIcons>>,
    #[serde(rename = "inviter", skip_serializing_if = "Option::is_none")]
    pub inviter: Option<String>,
    #[serde(rename = "is_delayed_message", skip_serializing_if = "Option::is_none")]
    pub is_delayed_message: Option<bool>,
    #[serde(rename = "is_intro", skip_serializing_if = "Option::is_none")]
    pub is_intro: Option<bool>,
    #[serde(rename = "is_starred", skip_serializing_if = "Option::is_none")]
    pub is_starred: Option<bool>,
    #[serde(rename = "last_read", skip_serializing_if = "Option::is_none")]
    pub last_read: Option<String>,
    #[serde(rename = "latest_reply", skip_serializing_if = "Option::is_none")]
    pub latest_reply: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "old_name", skip_serializing_if = "Option::is_none")]
    pub old_name: Option<String>,
    #[serde(rename = "parent_user_id", skip_serializing_if = "Option::is_none")]
    pub parent_user_id: Option<String>,
    #[serde(rename = "permalink", skip_serializing_if = "Option::is_none")]
    pub permalink: Option<String>,
    #[serde(rename = "pinned_to", skip_serializing_if = "Option::is_none")]
    pub pinned_to: Option<Vec<String>>,
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Vec<crate::models::ObjsReaction>>,
    #[serde(rename = "reply_count", skip_serializing_if = "Option::is_none")]
    pub reply_count: Option<i32>,
    #[serde(rename = "reply_users", skip_serializing_if = "Option::is_none")]
    pub reply_users: Option<Vec<String>>,
    #[serde(rename = "reply_users_count", skip_serializing_if = "Option::is_none")]
    pub reply_users_count: Option<i32>,
    #[serde(rename = "source_team", skip_serializing_if = "Option::is_none")]
    pub source_team: Option<String>,
    #[serde(rename = "subscribed", skip_serializing_if = "Option::is_none")]
    pub subscribed: Option<bool>,
    #[serde(rename = "subtype", skip_serializing_if = "Option::is_none")]
    pub subtype: Option<String>,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "thread_ts", skip_serializing_if = "Option::is_none")]
    pub thread_ts: Option<String>,
    #[serde(rename = "topic", skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    #[serde(rename = "ts")]
    pub ts: String,
    #[serde(rename = "type")]
    pub _type: String,
    #[serde(rename = "unread_count", skip_serializing_if = "Option::is_none")]
    pub unread_count: Option<i32>,
    #[serde(rename = "upload", skip_serializing_if = "Option::is_none")]
    pub upload: Option<bool>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "user_profile", skip_serializing_if = "Option::is_none")]
    pub user_profile: Option<Box<crate::models::ObjsUserProfileShort>>,
    #[serde(rename = "user_team", skip_serializing_if = "Option::is_none")]
    pub user_team: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl ObjsMessage {
    pub fn new(text: String, ts: String, _type: String) -> ObjsMessage {
        ObjsMessage {
            attachments: None,
            blocks: None,
            bot_id: None,
            bot_profile: None,
            client_msg_id: None,
            comment: None,
            display_as_bot: None,
            file: None,
            files: None,
            icons: None,
            inviter: None,
            is_delayed_message: None,
            is_intro: None,
            is_starred: None,
            last_read: None,
            latest_reply: None,
            name: None,
            old_name: None,
            parent_user_id: None,
            permalink: None,
            pinned_to: None,
            purpose: None,
            reactions: None,
            reply_count: None,
            reply_users: None,
            reply_users_count: None,
            source_team: None,
            subscribed: None,
            subtype: None,
            team: None,
            text,
            thread_ts: None,
            topic: None,
            ts,
            _type,
            unread_count: None,
            upload: None,
            user: None,
            user_profile: None,
            user_team: None,
            username: None,
        }
    }
}


