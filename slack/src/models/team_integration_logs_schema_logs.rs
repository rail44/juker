/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TeamIntegrationLogsSchemaLogs {
    #[serde(rename = "admin_app_id", skip_serializing_if = "Option::is_none")]
    pub admin_app_id: Option<String>,
    #[serde(rename = "app_id")]
    pub app_id: String,
    #[serde(rename = "app_type")]
    pub app_type: String,
    #[serde(rename = "change_type")]
    pub change_type: String,
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    #[serde(rename = "date")]
    pub date: String,
    #[serde(rename = "scope")]
    pub scope: String,
    #[serde(rename = "service_id", skip_serializing_if = "Option::is_none")]
    pub service_id: Option<String>,
    #[serde(rename = "service_type", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<String>,
    #[serde(rename = "user_id")]
    pub user_id: String,
    #[serde(rename = "user_name")]
    pub user_name: String,
}

impl TeamIntegrationLogsSchemaLogs {
    pub fn new(app_id: String, app_type: String, change_type: String, date: String, scope: String, user_id: String, user_name: String) -> TeamIntegrationLogsSchemaLogs {
        TeamIntegrationLogsSchemaLogs {
            admin_app_id: None,
            app_id,
            app_type,
            change_type,
            channel: None,
            date,
            scope,
            service_id: None,
            service_type: None,
            user_id,
            user_name,
        }
    }
}


