/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// FilesInfoSchema : Schema for successful response from files.info method



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FilesInfoSchema {
    #[serde(rename = "comments")]
    pub comments: Vec<serde_json::Value>,
    #[serde(rename = "editor", skip_serializing_if = "Option::is_none")]
    pub editor: Option<String>,
    #[serde(rename = "file")]
    pub file: Box<crate::models::ObjsFile>,
    #[serde(rename = "ok")]
    pub ok: crate::models::DefsOkTrue,
    #[serde(rename = "paging", skip_serializing_if = "Option::is_none")]
    pub paging: Option<Box<crate::models::ObjsPaging>>,
    #[serde(rename = "response_metadata", skip_serializing_if = "Option::is_none")]
    pub response_metadata: Option<serde_json::Value>,
}

impl FilesInfoSchema {
    /// Schema for successful response from files.info method
    pub fn new(comments: Vec<serde_json::Value>, file: crate::models::ObjsFile, ok: crate::models::DefsOkTrue) -> FilesInfoSchema {
        FilesInfoSchema {
            comments,
            editor: None,
            file: Box::new(file),
            ok,
            paging: None,
            response_metadata: None,
        }
    }
}


