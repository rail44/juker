/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ApiMethodUsersGetPresence : Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiMethodUsersGetPresence {
    #[serde(rename = "auto_away", skip_serializing_if = "Option::is_none")]
    pub auto_away: Option<bool>,
    #[serde(rename = "connection_count", skip_serializing_if = "Option::is_none")]
    pub connection_count: Option<i32>,
    #[serde(rename = "last_activity", skip_serializing_if = "Option::is_none")]
    pub last_activity: Option<i32>,
    #[serde(rename = "manual_away", skip_serializing_if = "Option::is_none")]
    pub manual_away: Option<bool>,
    #[serde(rename = "ok")]
    pub ok: crate::models::DefsOkTrue,
    #[serde(rename = "online", skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    #[serde(rename = "presence")]
    pub presence: String,
}

impl ApiMethodUsersGetPresence {
    /// Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65
    pub fn new(ok: crate::models::DefsOkTrue, presence: String) -> ApiMethodUsersGetPresence {
        ApiMethodUsersGetPresence {
            auto_away: None,
            connection_count: None,
            last_activity: None,
            manual_away: None,
            ok,
            online: None,
            presence,
        }
    }
}


