/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DndInfoSchema : Schema for successful response from dnd.info method



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DndInfoSchema {
    #[serde(rename = "dnd_enabled")]
    pub dnd_enabled: bool,
    #[serde(rename = "next_dnd_end_ts")]
    pub next_dnd_end_ts: i32,
    #[serde(rename = "next_dnd_start_ts")]
    pub next_dnd_start_ts: i32,
    #[serde(rename = "ok")]
    pub ok: crate::models::DefsOkTrue,
    #[serde(rename = "snooze_enabled", skip_serializing_if = "Option::is_none")]
    pub snooze_enabled: Option<bool>,
    #[serde(rename = "snooze_endtime", skip_serializing_if = "Option::is_none")]
    pub snooze_endtime: Option<i32>,
    #[serde(rename = "snooze_remaining", skip_serializing_if = "Option::is_none")]
    pub snooze_remaining: Option<i32>,
}

impl DndInfoSchema {
    /// Schema for successful response from dnd.info method
    pub fn new(dnd_enabled: bool, next_dnd_end_ts: i32, next_dnd_start_ts: i32, ok: crate::models::DefsOkTrue) -> DndInfoSchema {
        DndInfoSchema {
            dnd_enabled,
            next_dnd_end_ts,
            next_dnd_start_ts,
            ok,
            snooze_enabled: None,
            snooze_endtime: None,
            snooze_remaining: None,
        }
    }
}


