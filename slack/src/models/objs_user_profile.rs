/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObjsUserProfile {
    #[serde(rename = "always_active", skip_serializing_if = "Option::is_none")]
    pub always_active: Option<bool>,
    #[serde(rename = "api_app_id", skip_serializing_if = "Option::is_none")]
    pub api_app_id: Option<String>,
    #[serde(rename = "avatar_hash")]
    pub avatar_hash: String,
    #[serde(rename = "bot_id", skip_serializing_if = "Option::is_none")]
    pub bot_id: Option<String>,
    #[serde(rename = "display_name")]
    pub display_name: String,
    #[serde(rename = "display_name_normalized")]
    pub display_name_normalized: String,
    #[serde(rename = "is_app_user", skip_serializing_if = "Option::is_none")]
    pub is_app_user: Option<bool>,
    #[serde(rename = "is_custom_image", skip_serializing_if = "Option::is_none")]
    pub is_custom_image: Option<bool>,
    #[serde(rename = "last_avatar_image_hash", skip_serializing_if = "Option::is_none")]
    pub last_avatar_image_hash: Option<String>,
    #[serde(rename = "memberships_count", skip_serializing_if = "Option::is_none")]
    pub memberships_count: Option<i32>,
    #[serde(rename = "phone")]
    pub phone: String,
    #[serde(rename = "pronouns", skip_serializing_if = "Option::is_none")]
    pub pronouns: Option<String>,
    #[serde(rename = "real_name")]
    pub real_name: String,
    #[serde(rename = "real_name_normalized")]
    pub real_name_normalized: String,
    #[serde(rename = "skype")]
    pub skype: String,
    #[serde(rename = "status_default_emoji", skip_serializing_if = "Option::is_none")]
    pub status_default_emoji: Option<String>,
    #[serde(rename = "status_default_text", skip_serializing_if = "Option::is_none")]
    pub status_default_text: Option<String>,
    #[serde(rename = "status_emoji")]
    pub status_emoji: String,
    #[serde(rename = "status_expiration", skip_serializing_if = "Option::is_none")]
    pub status_expiration: Option<i32>,
    #[serde(rename = "status_text")]
    pub status_text: String,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<i32>,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

impl ObjsUserProfile {
    pub fn new(avatar_hash: String, display_name: String, display_name_normalized: String, phone: String, real_name: String, real_name_normalized: String, skype: String, status_emoji: String, status_text: String, title: String) -> ObjsUserProfile {
        ObjsUserProfile {
            always_active: None,
            api_app_id: None,
            avatar_hash,
            bot_id: None,
            display_name,
            display_name_normalized,
            is_app_user: None,
            is_custom_image: None,
            last_avatar_image_hash: None,
            memberships_count: None,
            phone,
            pronouns: None,
            real_name,
            real_name_normalized,
            skype,
            status_default_emoji: None,
            status_default_text: None,
            status_emoji,
            status_expiration: None,
            status_text,
            team: None,
            title,
            updated: None,
            user_id: None,
        }
    }
}


